---
title: "Data analysis"
title-block-banner: "#870052"
title-block-banner-color: "#FFFFFF"
author: 
  name: Magnus Johansson
  affiliation: RISE Research Institutes of Sweden
  affiliation-url: https://ri.se/shic
  orcid: 0000-0003-1669-592X
date: 2023-06-12
date-format: YYYY-MM-DD
format: 
  html:
    
    toc: true
    embed-resources: true
    standalone: true
    mainfont: 'Arial'
    code-overflow: wrap
    code-fold: show
    code-link: true
    number-sections: true
    fig-dpi: 96
    layout-align: left
    linestretch: 1.6
    theme: materia
  pdf:
    papersize: a4
    documentclass: article #article, report or book
    #classoption: [twocolumn, portrait]
  docx:
    
    toc: false
    number-sections: false
    highlight-style: github
always_allow_html: true
execute:
  echo: true
  warning: false
  message: false
  cache: false
css: style.css
editor_options: 
  chunk_output_type: console
---

## Overview of this file

-   Visualizing distributions
-   Running models
-   Checking assumptions
-   Effects(?)

### Setting up

Read data.

```{r}
df.long <- read.csv("dataLong.csv")
```


Let's load packages/libraries.

```{r}
#| code-fold: show
# these are mostly for data management/wrangling and visualization
library(tidyverse) # for most things
library(foreign) # for reading SPSS files
library(readxl) # read MS Excel files
library(showtext) # get fonts
library(glue) # simplifies mixing text and code in figures and tables
library(arrow) # support for efficient file formats
library(grateful) # create table+references for packages used in a project
library(styler) # only a one-time installation (it is an Rstudio plugin)
library(car) # for car::recode only
library(skimr) # data skimming
library(lubridate) # for handling dates in data
library(janitor) # for many things in data cleaning

# these are mostly for data analysis and visualization
library(gtsummary)
library(scales)
library(visdat)
library(psych)
library(lme4)
library(nlme)
library(broom.mixed)
library(patchwork)
library(easystats)
library(mice)
library(modelsummary)
library(ggdist)
library(kableExtra)
library(formattable)
library(ggrepel)
library(ggrain)
library(sjPlot)
```

Define a ggplot theme `theme_ki()`, a standard table function, `kbl_ki()`, and a color palette based on KI's design guide, `ki_color_palette`.

```{r}
#| code-fold: show
source("ki.R") # this reads an external file and loads whatever is in it
```

## Visualizations

### Histogram

```{r}
df.long %>% 
  filter(Group == "Control") %>% 
  ggplot(aes(x = value, fill = measure)) +
  geom_histogram(binwidth = 4) +
  facet_grid(measure~time) +
  theme_ki() +
  scale_fill_manual(values = ki_color_palette) +
  labs(title = "Outcomes over time",
       subtitle = "Control group",
       x = "",
       y = "Number of respondents")

df.long %>% 
  filter(!Group == "Control") %>% 
  ggplot(aes(x = value, fill = measure)) +
  geom_histogram(binwidth = 4) +
  facet_grid(measure~time) +
  theme_ki() +
  scale_fill_manual(values = ki_color_palette) +
  labs(title = "Outcomes over time",
       subtitle = "Intervention group",
       x = "",
       y = "Number of respondents")

```

### Density

```{r}
df.long %>% 
  filter(Group == "Control") %>% 
  ggplot(aes(x = value, fill = measure)) +
  geom_density() +
  facet_grid(measure~time) +
  theme_ki() +
  scale_fill_manual(values = ki_color_palette) +
  labs(title = "Outcomes over time",
       subtitle = "Control group",
       x = "",
       y = "Density of respondents")

df.long %>% 
  filter(!Group == "Control") %>% 
  ggplot(aes(x = value, fill = measure)) +
  geom_density() +
  facet_grid(measure~time) +
  theme_ki() +
  scale_fill_manual(values = ki_color_palette) +
  labs(title = "Outcomes over time",
       subtitle = "Intervention group",
       x = "",
       y = "Density of respondents")
```

### stat_halfeye

```{r}
df.long %>% 
  filter(measure == "DEP") %>% 
  ggplot(aes(x = value, fill = Group)) +
  stat_halfeye() +
  facet_grid(Group~time) +
  theme_ki() +
  #scale_fill_manual(values = ki_color_palette) +
  labs(title = "Depression outcomes over time",
       x = "",
       y = "Density of respondents")
```

What do these distributions look like to you?

### Box + violin

```{r}
#| fig-height: 7

df.long %>% 
  ggplot(aes(x = time, y = value, fill = Group)) +
  geom_violin(position = position_dodge(0.9),
              alpha = 0.9) +
  geom_boxplot(position = position_dodge(0.9),
               width = .2,
               notch = TRUE,
               outlier.shape = NA,
               alpha = 0.3) +
  facet_wrap(~measure,
             ncol = 1) +
  theme_ki() +
  labs(title = "Outcomes over time",
       x = "Time point",
       y = "Distribution of outcome measurements")
```

Linear effect?

### Individuals over time

Using the package `ggrain` we can get this sweet figure that combines a boxplot, a split violin plot, jittered points for individuals, and lines between individuals over time!

```{r}
df.long %>%
  filter(measure == "DEP") %>% 
  ggplot(aes(x = time, y = value, group = time, fill = Group, color = Group)) +
  geom_rain(
    boxplot.args = list(color = "black", outlier.shape = NA),
    id.long.var = "id"
  ) +
  scale_fill_brewer(palette = "Dark2",
                    aesthetics = c("color","fill")) +
  theme_ki() +
  facet_wrap(~Group,
             nrow = 2) +
  labs(title = "Depression over time")
```

And a slightly different version - can you see what is different and how it relates to the code?

```{r}
df.long %>%
  filter(measure == "DEP") %>% 
  ggplot(aes(x = time, y = value, group = time, fill = Group, color = factor(id))) +
  geom_rain(
    alpha = .6,
    boxplot.args = list(color = "black", outlier.shape = NA),
    id.long.var = "id"
  ) +
  scale_fill_brewer(palette = "Dark2") +
  scale_color_viridis_d(guide = "none") +
  theme_ki() +
  facet_wrap(~Group,
             nrow = 2) +
  labs(title = "Depression over time")
```

### Mean+SD

```{r}
#| label: fig-depMeanSD
#| fig-cap: "Depression over time by group"

df.long %>%
  filter(measure == "DEP") %>% 
  group_by(time,Group) %>% 
  reframe(Mean = mean(value, na.rm = T),
          SD = sd(value, na.rm = T)) %>% 
  ggplot(aes(x = time, 
             y = Mean, 
             group = Group, 
             color = Group)) +
  geom_point(size = 3) +
  geom_line(linewidth = 1.3) +
  theme_ki() +
  scale_y_continuous(limits = c(0,42)) +
  geom_ribbon(aes(ymin = Mean-SD,
                  ymax = Mean+SD,
                  fill = Group),
              alpha = 0.1,
              linetype = 0) +
  labs(y = "Mean Depression Score",
       x = "Time point",
       caption = "Note. Shaded area indicates one standard deviation.") +
  theme(plot.caption = element_text(hjust = 0))
```

#### Error-bar

```{r}
df.long %>%
  filter(measure == "DEP") %>%
  group_by(time, Group) %>%
  reframe(
    Mean = mean(value, na.rm = T),
    SD = sd(value, na.rm = T)
  ) %>%
  ggplot(aes(
    x = time,
    y = Mean,
    group = Group,
    color = Group
  )) +
  geom_point(
    size = 3,
    position = position_dodge(.5)
  ) +
  geom_line(
    linewidth = 1.3,
    position = position_dodge(.5)
  ) +
  theme_ki() +
  scale_y_continuous(limits = c(0, 42)) +
  geom_errorbar(
    aes(
      ymin = Mean - SD,
      ymax = Mean + SD
    ),
    position = position_dodge(.5), width = .2
  ) +
  labs( # title = "Depression over time by group",
    y = "Mean Depression Score",
    x = "Time point",
    caption = "Note. Error bars indicate one standard deviation."
  ) +
  theme(plot.caption = element_text(hjust = 0))
```


## Linear model 1

We will start with DEP as outcome and fit a linear model. But first, we'll split our `measure` variable into three separate variables (while retaining `time` as its own variable), using `pivot_wider()`.

```{r}
df.model <- df.long %>% 
  pivot_wider(names_from = "measure",
              values_from = "value") %>% 
  rename(Depression = DEP,
         Anxiety = ANX,
         Stress = STRESS) %>% 
  mutate(time = as.integer(time))
```

Now we can specify a model:

```{r}
m1 <- lmer(data = df.model,
         Depression ~ time + Group + time*Group + (1 | id),
         REML = TRUE)
```

::: {.callout-tip}
### Exercise
Can you decipher the syntax?
:::
### Check assumptions

```{r}
#| fig-height: 8
check_model(m1)
```

### Table

```{r}
#| label: tbl-model1
#| tbl-cap: 'Linear Mixed Model 1 summary statistics'
sjPlot::tab_model(m1)
```
See <https://cran.r-project.org/web/packages/sjPlot/vignettes/tab_model_estimates.html> for more details on generating tables with `sjPlot` functions. One drawback with this package is that it only generates HTML-tables, which don't work well with PDF and Word output formats.

An alternative is `gtsummary`, which is more flexible regarding the output, but may need a bit more work. See <https://www.danieldsjoberg.com/gtsummary/index.html> for examples.

```{r}
#| label: tbl-model2
#| tbl-cap: 'Linear Mixed Model 1 summary statistics'
gtsummary::tbl_regression(m1) %>% 
  add_p()
```

You can also get "raw" output to format by yourself.

```{r}
summary(m1)
```

More friendly formatted to create a simple table.

```{r}
tidy(m1) %>% 
  mutate_if(is.numeric, round, 2) %>% 
  kbl_ki() # note that this function is specified in the file "ki.R"
```

And some additional summary stats.
```{r}
glance(m1)
```

### Predicted response

```{r}
estimate_expectation(m1, data = "grid") %>% 
  plot() +
  theme_ki()
```

### Plot parameters

```{r}
plot(parameters(m1))
```

## Linear model 2

What happens if we define time as a factor?

## Linear model 3

With random slopes?


## Marginal effects

![https://twitter.com/stephenjwild/status/1666056019993034755](images/marginaleffects.jpg)

link to `marginaleffects`!


