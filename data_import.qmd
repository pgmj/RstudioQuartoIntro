---
title: "Data import & descriptives"
title-block-banner: "#870052"
title-block-banner-color: "#FFFFFF"
author: 
  name: Magnus Johansson
  affiliation: RISE Research Institutes of Sweden
  affiliation-url: https://ri.se/shic
  orcid: 0000-0003-1669-592X
date: 2023-06-12
date-format: YYYY-MM-DD
format: 
  html:
    toc: true
    toc-depth: 3
    toc-title: "Table of contents"
    embed-resources: true
    standalone: true
    page-layout: full
    mainfont: 'Arial'
    code-overflow: wrap
    code-tools: true
    code-fold: show
    code-link: true
    number-sections: true
    fig-dpi: 96
    layout-align: left
    linestretch: 1.6
    theme: materia
execute:
  echo: true
  warning: false
  message: false
  cache: false
css: style.css
editor_options: 
  chunk_output_type: console
---

## Data cleaning

![Image credit: https://kbroman.org/Talk_DataCleaning/data_cleaning.pdf](images/RulesDataCleaning.jpg){fig-align="center"}

## Setting up for data analysis {background-color="#99D9DD"}

Let's load packages/libraries.

```{r}
# these are mostly for data management/wrangling and visualization
library(tidyverse) # for most things
library(foreign) # for reading SPSS files
library(readxl) # read MS Excel files
library(showtext) # get fonts
library(glue) # simplifies mixing text and code in figures and tables
library(arrow) # support for efficient file formats
library(grateful) # create table+references for packages used in a project
library(styler) # only a one-time installation (it is an Rstudio plugin)
library(car) # for car::recode only
library(skimr) # data skimming
library(lubridate) # for handling dates in data
library(janitor) # for many things in data cleaning

# these are mostly for data analysis and visualization
library(gtsummary)
library(scales)
library(visdat)
library(psych)
library(lme4)
library(nlme)
library(broom.mixed)
library(ggplot2)
library(patchwork)
library(easystats)
library(GGally)
library(mice)
library(modelsummary)
library(ggside)
library(ggdist)
library(kableExtra)
library(formattable)
library(ggrepel)
```

Define a ggplot theme `theme_ki()` and standard table function, `kbl_ki()`.

```{r}
source("ki.R") # this reads an external file and loads whatever is in it
```

### Adaptions {.smaller}

Some functions exist in multiple packages, which can be a source of headaches and confusion.

Below we define preferred functions that are frequently used. If desired, we can still use specific functions by using their package prefix, for instance `dplyr::recode()`.

```{r}
### 
select <- dplyr::select
count <- dplyr::count
recode <- car::recode
rename <- dplyr::rename
```

## Importing data

```{r}
df <- read_excel("data/MiCBT RCT data_Bridges repository.xlsx")
```
Look in the Environment quadrant. How many observations and variables do we have in the `df` object?

Press the circle to the left of `df` to get a quick look at the data. We can see "missing" noted in several fields. Anything else you notice about the variables?

Let's re-import the data and tell `read_excel()` to code missing correctly.

```{r}
df <- read_excel("data/MiCBT RCT data_Bridges repository.xlsx",
                 na = "missing") %>% 
  rename(id = BridgesID,
         Group = GROUP) %>% 
  mutate(age = TK10_t0)
```

Have another look? That is a lot better!

## Demographics

We'll start with age.

```{r}
summary(df$age)
```
`summary()` is a general function that can be used with many types of objects, including model outputs.

### Tables

::: panel-tabset
#### All participants

```{r}
df %>% 
  select(age) %>% 
  tbl_summary()
```

#### Control/intervention group
```{r}
df %>% 
  select(age,Group) %>% 
  tbl_summary(by = Group)
```
:::

### Figures

Base R examples.
```{r}
hist(df$age)

hist(df$age, 
     col = "lightblue", 
     main = "Histogram of participant age",
     xlab = "Age")
```

With ggplot we have a lot more flexibility.
```{r}
ggplot(df,
       aes(x = age)) +
  geom_histogram(fill = "lightblue",
                 color = "black") +
  labs(title = "Histogram of participant age",
       x = "Age",
       y = "Count") +
  theme_ki()
```

Fill color based on Group variable.
- dynamic color/fill needs to be within the `aes()` function (aesthetics).
```{r}
ggplot(df,
       aes(x = age, fill = Group)) +
  geom_histogram(color = "black") +
  labs(title = "Histogram of participant age",
       x = "Age",
       y = "Count") +
  theme_ki() +
  scale_y_continuous(breaks = c(0,4,8,12)) +
  scale_color_manual(values = ki_color_palette, 
                     aesthetics = c("fill","color"))

```

Or we can use `facet_wrap()` to make parallel plots.
```{r}
ggplot(df,
       aes(x = age, fill = Group)) +
  geom_histogram(color = "white") +
  labs(title = "Histogram of participant age",
       x = "Age",
       y = "Count") +
  theme_ki() +
  scale_y_continuous(breaks = c(0,4,8,12)) +
  scale_color_manual(values = ki_color_palette, 
                     aesthetics = c("fill","color"),
                     guide = "none") +
  facet_wrap(~Group)
```


## Variable names


## Wide to long format

Almost everything in R likes long format. What is the naming scheme?

Let's look at the variables ending with "t".

```{r}
df %>% 
  select(ends_with("t0")) %>% 
  names()

df %>% 
  select(ends_with("t1")) %>% 
  names()
```

Seems like some variables don't stick to the `_t[0-3]` scheme...

We can demonstrate the option-click cursor in the example below.

```{r}
df.wide <- df %>% 
  rename(MSESe_t0 = MSES_Et0,
         MSESi_t0 = MSES_It0,
         MSESe_t1 = MSES_Et1,
         MSESi_t1 = MSES_It1,
         MSESe_t2 = MSES_Et2,
         MSESi_t2 = MSES_It2,
         MSESe_t3 = MSES_Et3,
         MSESi_t3 = MSES_It3)
```

Let's try to pivot this dataframe to long format.

```{r}
#| eval: false
df.wide %>% 
  pivot_longer(ends_with(c("t0","t1","t2","t3")))
```

> Error in `pivot_longer()`:
> ! Can't combine `TK10_t0` <double> and `K10_di_t0` <character>.

```{r}
df.long <- df.wide %>% 
  select(!K10_di_t0) %>% 
  pivot_longer(cols = ends_with(c("t0","t1","t2","t3")),
               names_to = c("measure", "time"),
               names_sep = "_t")
```

And look at the df.

```{r}
glimpse(df.long)
```

## Descriptives




## Correlation & visualization

rework these for new dataset, first without "styling"

### Correlation matrix

without and with grouping

```{r}
#| eval: false
df %>% 
  select(starts_with("WHO"),GDS,WHOQoL_BREF,NMM,Gender) %>% 
  ggpairs(aes(color = Gender),alpha = 0.8) +
  scale_color_manual(values = RISEpalette1,
                     aesthetics = c("color", "fill"))
```

### easystats `plot(cor_test())`

```{r}
#| eval: false
plot(cor_test(df, "NMM", "WHOQoL_BREF")) +
  theme_minimal(base_size = 15, 
                base_family = "Lato") +
  theme_rise(fontfamily = "Lato", 
             axissize = 15) +
  geom_point(data = df, 
             aes(NMM, WHOQoL_BREF), 
             size = 2) +
    ylab("WHOQoL-BREF") +
    xlab("NMM")
```
