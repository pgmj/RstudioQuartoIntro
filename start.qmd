---
title: "Reproducible data analysis with Quarto and R"
title-block-banner: "#870052"
title-block-banner-color: "#FFFFFF"
title-slide-attributes: 
  data-background-color: "#009ca6"
author: 
  name: Magnus Johansson
  affiliation: RISE Research Institutes of Sweden
  affiliation-url: https://ri.se/shic
  orcid: 0000-0003-1669-592X
date: last-modified
format: 
  html:
    toc: true
    toc-depth: 3
    toc-title: "Table of contents"
    embed-resources: true
    standalone: true
    page-layout: full
    mainfont: 'Arial'
    code-overflow: wrap
    code-tools: true
    code-fold: show
    code-link: true
    number-sections: true
    fig-dpi: 96
    layout-align: left
    linestretch: 1.6
    theme: materia
  revealjs:
    theme: default
    chalkboard: false
    self-contained: true
    mainfont: 'Arial'
    slide-level: 4
    scrollable: true
    smaller: false
    center: false
    
execute:
  echo: true
  warning: false
  message: false
  cache: false
css: styles.css
editor_options: 
  chunk_output_type: console
---

## What is this course (and what is it not)

- It is not a statistics course
- We'll cover the basics of using R, Rstudio and Quarto
- More advanced things will be addressed at later sessions
  - requests are welcome
- I like pragmatic learning, so we'll use practical examples for most things

### Expectations and hopes

I hope that you will be fairly comfortable with:

- importing a dataset & doing basic analysis
- documenting your analysis alongside your code
  - creating an output document
- getting something out of the many online articles using R for analysis
- searching the internet for help

### Overview for today

- the basics of using Rstudio
- the basics of setting up and using Quarto (in Rstudio)
- a tiny bit of really basic R functions
- importing data (and naming variables)
- data wrangling
- descriptive analysis & visualization
- modeling & visualization

## Keyboard shortcuts

You really really want to do things cleverly from the start.

- **avoid unnecessary typing or use of the mouse**

I have prepared a handout containing the most frequently used strategies.

- We'll walk through them once later on, and then you have the handout as a reference.

### Keyboard shortcuts {.smaller}

- **tab-completion**
TAB-tangenten har många funktioner, dels kan den fylla i objekt- eller funktionsnamn när du skriver kod, men även i sökvägar när du ska läsa en fil.
- **CTRL+enter**
Kör kodraden du har markören på (och hoppar ner till nästa). Om du har ett block med flera rader av tidy-kod (som hålls samman med pipe-symbolen %>% eller |>) eller ggplot (som hålls samman med +) så spelar det ingen roll var bland raderna markören är, hela blocket körs ändå
- **CTRL+SHIFT+enter**
Kör en hel code chunk i Quarto. Spelar ingen roll var i chunken du har markören.
- **CTRL+SHIFT+m**
Skapar en pipe-symbol
- **CTRL+ALT(option)+i**
Skapar en ny code chunk i Quarto
- **CTRL/CMD+SHIFT+c**
Kommentera bort/in alla rader som är markerade


## Setting up

Let's load packages/libraries.
```{r}
#| eval: false
# these are mostly for data management/wrangling and visualization
library(tidyverse)
library(foreign)
library(readxl)
library(showtext)
library(stringr)
library(glue)
library(arrow)
library(car)
library(grateful)
library(styler)
library(car)
library(patchwork)
library(broom.mixed)
library(skimr)

# these are mostly for data analysis and vizualisation
library(psych)
library(lme4)
library(nlme)
library(easystats)
library(GGally)
library(mice)
library(modelsummary)
library(ggside)
library(ggdist)
library(kableExtra)
library(formattable)
library(ggrepel)

source("ki.R")
```

Some functions exist in multiple packages, which can be a source of headaches and confusion.

Below we define preferred functions that are frequently used. If desired, we can still use specific functions by using their package prefix, for instance `dplyr::recode()`.
```{r}
### 
select <- dplyr::select
count <- dplyr::count
recode <- car::recode
rename <- dplyr::rename
```

rework these for new dataset, first without "styling"
```{r}
#| eval: false
df %>% 
  select(starts_with("WHO"),GDS,WHOQoL_BREF,NMM,Gender) %>% 
  ggpairs(aes(color = Gender),alpha = 0.8) +
  scale_color_manual(values = RISEpalette1,
                     aesthetics = c("color", "fill"))
```


#### NMM ~ WHOQoL
```{r}
#| eval: false
plot(cor_test(df, "NMM", "WHOQoL_BREF")) +
  theme_minimal(base_size = 15, 
                base_family = "Lato") +
  theme_rise(fontfamily = "Lato", 
             axissize = 15) +
  geom_point(data = df, 
             aes(NMM, WHOQoL_BREF), 
             size = 2) +
    ylab("WHOQoL-BREF") +
    xlab("NMM")
```

